// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())

  name  String
  surname String
  email     String @unique
  password  String
  phoneNumber String @unique
  role Role @default(USER)
  phoneVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  cartItems CartItem[]

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int @unique

  verificationCode VerificationCode @relation(fields: [verificationCodeId], references: [id])
  verificationCodeId Int @unique
}

model Product {
  id        Int      @id @default(autoincrement())

  name      String
  imageUrl  String
  price     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pizzas Pizza[]

  cartItems CartItem[]
}

model Pizza {
  id        Int      @id @default(autoincrement())

  price    Int
  size     Int
  type     Int
  carbs    Int
  fats     Int
  kcal     Int
  proteins Int
  weight   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  productId Int

  ingredients Ingredient[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name String
  price Int
  imageUrl String

  createdAt DateTime @default(now())

  pizzas Pizza[]

  cartItems CartItem[]
}

model Order {
  id Int @id @default(autoincrement())

  status OrderStatus @default(PENDING)
  totalAmount Int
  paymentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId Int
}

model CartItem {
  id Int @id @default(autoincrement())

  products Product[]

  ingredients Ingredient[]

  user User @relation(fields: [userId], references: [id])
  userId Int

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  totalItems Int

  items CartItem[]

  user User?
  userToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  createdAt DateTime @default(now())

  user User?
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  SUCCEDED
  PENDING
  CANCELED
}
